_exported_symbols = []

# Modules
import duckdb.functional as functional
import duckdb.typing as typing
import functools

_exported_symbols.extend([
    "typing",
    "functional"
])

# Classes
from .duckdb import (
    DuckDBPyRelation,
    DuckDBPyConnection,
    Statement,
    ExplainType,
    StatementType,
    ExpectedResultType,
    PythonExceptionHandling,
    RenderMode,
    Expression,
    ConstantExpression,
    ColumnExpression,
    StarExpression,
    FunctionExpression,
    CaseExpression,
)
_exported_symbols.extend([
    "DuckDBPyRelation",
    "DuckDBPyConnection",
    "ExplainType",
    "PythonExceptionHandling",
    "Expression",
    "ConstantExpression",
    "ColumnExpression",
    "StarExpression",
    "FunctionExpression",
    "CaseExpression",
])

# These are overloaded twice, we define them inside of C++ so pybind can deal with it
_exported_symbols.extend([
    'df',
    'arrow'
])
from .duckdb import (
    df,
    arrow
)

import inspect

# NOTE: this section is generated by tools/pythonpkg/scripts/generate_connection_wrapper_methods.py.
# Do not edit this section manually, your changes will be overwritten!

# START OF CONNECTION WRAPPER

def cursor(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.cursor(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('cursor')

def register_filesystem(filesystem, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['filesystem'] = filesystem
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.register_filesystem(filesystem, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('register_filesystem')

def unregister_filesystem(name, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['name'] = name
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.unregister_filesystem(name, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('unregister_filesystem')

def list_filesystems(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.list_filesystems(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('list_filesystems')

def filesystem_is_registered(name, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['name'] = name
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.filesystem_is_registered(name, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('filesystem_is_registered')

def create_function(name, function, parameters = None, return_type = None, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['name'] = name
    locals['function'] = function
    locals['parameters'] = parameters
    locals['return_type'] = return_type
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.create_function(name, function, parameters, return_type, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('create_function')

def remove_function(name, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['name'] = name
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.remove_function(name, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('remove_function')

def sqltype(type_str, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['type_str'] = type_str
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.sqltype(type_str, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('sqltype')

def dtype(type_str, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['type_str'] = type_str
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.dtype(type_str, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('dtype')

def type(type_str, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['type_str'] = type_str
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.type(type_str, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('type')

def array_type(type, size, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['type'] = type
    locals['size'] = size
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.array_type(type, size, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('array_type')

def list_type(type, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['type'] = type
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.list_type(type, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('list_type')

def union_type(members, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['members'] = members
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.union_type(members, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('union_type')

def string_type(collation = "", **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['collation'] = collation
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.string_type(collation, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('string_type')

def enum_type(name, type, values, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['name'] = name
    locals['type'] = type
    locals['values'] = values
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.enum_type(name, type, values, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('enum_type')

def decimal_type(width, scale, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['width'] = width
    locals['scale'] = scale
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.decimal_type(width, scale, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('decimal_type')

def struct_type(fields, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['fields'] = fields
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.struct_type(fields, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('struct_type')

def row_type(fields, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['fields'] = fields
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.row_type(fields, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('row_type')

def map_type(key, value, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['key'] = key
    locals['value'] = value
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.map_type(key, value, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('map_type')

def duplicate(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.duplicate(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('duplicate')

def execute(query, parameters = None, multiple_parameter_sets = False, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['query'] = query
    locals['parameters'] = parameters
    locals['multiple_parameter_sets'] = multiple_parameter_sets
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.execute(query, parameters, multiple_parameter_sets, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('execute')

def executemany(query, parameters = None, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['query'] = query
    locals['parameters'] = parameters
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.executemany(query, parameters, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('executemany')

def close(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.close(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('close')

def interrupt(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.interrupt(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('interrupt')

def fetchone(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.fetchone(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('fetchone')

def fetchmany(size = 1, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['size'] = size
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.fetchmany(size, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('fetchmany')

def fetchall(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.fetchall(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('fetchall')

def fetchnumpy(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.fetchnumpy(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('fetchnumpy')

def fetchdf(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.fetchdf(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('fetchdf')

def fetch_df(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.fetch_df(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('fetch_df')

def fetch_df_chunk(vectors_per_chunk = 1, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['vectors_per_chunk'] = vectors_per_chunk
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.fetch_df_chunk(vectors_per_chunk, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('fetch_df_chunk')

def pl(rows_per_batch = 1000000, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['rows_per_batch'] = rows_per_batch
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.pl(rows_per_batch, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('pl')

def fetch_arrow_table(rows_per_batch = 1000000, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['rows_per_batch'] = rows_per_batch
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.fetch_arrow_table(rows_per_batch, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('fetch_arrow_table')

def fetch_record_batch(rows_per_batch = 1000000, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['rows_per_batch'] = rows_per_batch
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.fetch_record_batch(rows_per_batch, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('fetch_record_batch')

def torch(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.torch(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('torch')

def tf(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.tf(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('tf')

def begin(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.begin(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('begin')

def commit(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.commit(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('commit')

def rollback(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.rollback(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('rollback')

def checkpoint(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.checkpoint(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('checkpoint')

def append(table_name, df, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['table_name'] = table_name
    locals['df'] = df
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.append(table_name, df, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('append')

def register(view_name, python_object, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['view_name'] = view_name
    locals['python_object'] = python_object
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.register(view_name, python_object, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('register')

def unregister(view_name, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['view_name'] = view_name
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.unregister(view_name, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('unregister')

def table(table_name, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['table_name'] = table_name
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.table(table_name, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('table')

def view(view_name, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['view_name'] = view_name
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.view(view_name, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('view')

def values(values, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['values'] = values
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.values(values, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('values')

def table_function(name, parameters = None, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['name'] = name
    locals['parameters'] = parameters
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.table_function(name, parameters, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('table_function')

def read_json(name, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['name'] = name
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.read_json(name, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('read_json')

def extract_statements(query, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['query'] = query
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.extract_statements(query, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('extract_statements')

def sql(query, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['query'] = query
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.sql(query, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('sql')

def query(query, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['query'] = query
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.query(query, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('query')

def from_query(query, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['query'] = query
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_query(query, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('from_query')

def read_csv(path_or_buffer, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['path_or_buffer'] = path_or_buffer
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.read_csv(path_or_buffer, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('read_csv')

def from_csv_auto(path_or_buffer, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['path_or_buffer'] = path_or_buffer
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_csv_auto(path_or_buffer, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('from_csv_auto')

def from_df(df, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['df'] = df
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_df(df, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('from_df')

def from_arrow(arrow_object, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['arrow_object'] = arrow_object
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_arrow(arrow_object, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('from_arrow')

def from_parquet(file_glob, binary_as_string = False, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['file_glob'] = file_glob
    locals['binary_as_string'] = binary_as_string
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_parquet(file_glob, binary_as_string, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('from_parquet')

def read_parquet(file_glob, binary_as_string = False, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['file_glob'] = file_glob
    locals['binary_as_string'] = binary_as_string
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.read_parquet(file_glob, binary_as_string, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('read_parquet')

def from_substrait(proto, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['proto'] = proto
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_substrait(proto, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('from_substrait')

def get_substrait(query, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['query'] = query
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.get_substrait(query, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('get_substrait')

def get_substrait_json(query, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['query'] = query
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.get_substrait_json(query, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('get_substrait_json')

def from_substrait_json(json, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['json'] = json
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_substrait_json(json, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('from_substrait_json')

def get_table_names(query, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['query'] = query
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.get_table_names(query, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('get_table_names')

def install_extension(extension, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['extension'] = extension
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.install_extension(extension, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('install_extension')

def load_extension(extension, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['extension'] = extension
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.load_extension(extension, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('load_extension')

def project(df, project_expr, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['project_expr'] = project_expr
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_df(df).project(project_expr, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('project')

def distinct(df, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_df(df).distinct(**kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('distinct')

def write_csv(df, *args, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['args'] = args
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_df(df).write_csv(*args, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('write_csv')

def aggregate(df, aggr_expr, group_expr = "", **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['aggr_expr'] = aggr_expr
    locals['group_expr'] = group_expr
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_df(df).aggregate(aggr_expr, group_expr, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('aggregate')

def alias(df, alias, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['alias'] = alias
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_df(df).set_alias(alias, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('alias')

def filter(df, filter_expr, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['filter_expr'] = filter_expr
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_df(df).filter(filter_expr, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('filter')

def limit(df, n, offset = 0, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['n'] = n
    locals['offset'] = offset
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_df(df).limit(n, offset, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('limit')

def order(df, order_expr, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['order_expr'] = order_expr
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_df(df).order(order_expr, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('order')

def query_df(df, virtual_table_name, sql_query, **kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['virtual_table_name'] = virtual_table_name
    locals['sql_query'] = sql_query
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.from_df(df).query(virtual_table_name, sql_query, **kwargs)', globals, locals)
    return locals['result']
_exported_symbols.append('query_df')

def description(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.description', globals, locals)
    return locals['result']
_exported_symbols.append('description')

def rowcount(**kwargs):
    if 'connection' in kwargs:
        conn = kwargs.pop('connection')
    else:
        conn = duckdb.connect(":default:")
    previous_frame = inspect.currentframe().f_back
    globals = previous_frame.f_globals
    locals = previous_frame.f_locals.copy()
    locals['conn'] = conn
    locals['kwargs'] = kwargs
    exec('result = conn.rowcount', globals, locals)
    return locals['result']
_exported_symbols.append('rowcount')
# END OF CONNECTION WRAPPER

# Enums
from .duckdb import (
    ANALYZE,
    DEFAULT,
    RETURN_NULL,
    STANDARD,
    COLUMNS,
    ROWS
)
_exported_symbols.extend([
    "ANALYZE",
    "DEFAULT",
    "RETURN_NULL",
    "STANDARD"
])


# read-only properties
from .duckdb import (
    __standard_vector_size__,
    __interactive__,
    __jupyter__,
    __version__,
    apilevel,
    comment,
    default_connection,
    identifier,
    keyword,
    numeric_const,
    operator,
    paramstyle,
    string_const,
    threadsafety,
    token_type,
    tokenize
)
_exported_symbols.extend([
    "__standard_vector_size__",
    "__interactive__",
    "__jupyter__",
    "__version__",
    "apilevel",
    "comment",
    "default_connection",
    "identifier",
    "keyword",
    "numeric_const",
    "operator",
    "paramstyle",
    "string_const",
    "threadsafety",
    "token_type",
    "tokenize"
])


from .duckdb import (
    connect
)

_exported_symbols.extend([
    "connect"
])

# Exceptions
from .duckdb import (
    Error,
    DataError,
    ConversionException,
    OutOfRangeException,
    TypeMismatchException,
    FatalException,
    IntegrityError,
    ConstraintException,
    InternalError,
    InternalException,
    InterruptException,
    NotSupportedError,
    NotImplementedException,
    OperationalError,
    ConnectionException,
    IOException,
    HTTPException,
    OutOfMemoryException,
    SerializationException,
    TransactionException,
    PermissionException,
    ProgrammingError,
    BinderException,
    CatalogException,
    InvalidInputException,
    InvalidTypeException,
    ParserException,
    SyntaxException,
    SequenceException,
    Warning
)
_exported_symbols.extend([
    "Error",
    "DataError",
    "ConversionException",
    "OutOfRangeException",
    "TypeMismatchException",
    "FatalException",
    "IntegrityError",
    "ConstraintException",
    "InternalError",
    "InternalException",
    "InterruptException",
    "NotSupportedError",
    "NotImplementedException",
    "OperationalError",
    "ConnectionException",
    "IOException",
    "HTTPException",
    "OutOfMemoryException",
    "SerializationException",
    "TransactionException",
    "PermissionException",
    "ProgrammingError",
    "BinderException",
    "CatalogException",
    "InvalidInputException",
    "InvalidTypeException",
    "ParserException",
    "SyntaxException",
    "SequenceException",
    "Warning"
])

# Value
from .value.constant import (
    Value,
    NullValue,
    BooleanValue,
    UnsignedBinaryValue,
    UnsignedShortValue,
    UnsignedIntegerValue,
    UnsignedLongValue,
    BinaryValue,
    ShortValue,
    IntegerValue,
    LongValue,
    HugeIntegerValue,
    FloatValue,
    DoubleValue,
    DecimalValue,
    StringValue,
    UUIDValue,
    BitValue,
    BlobValue,
    DateValue,
    IntervalValue,
    TimestampValue,
    TimestampSecondValue,
    TimestampMilisecondValue,
    TimestampNanosecondValue,
    TimestampTimeZoneValue,
    TimeValue,
    TimeTimeZoneValue,
)

_exported_symbols.extend([
    "Value",
    "NullValue",
    "BooleanValue",
    "UnsignedBinaryValue",
    "UnsignedShortValue",
    "UnsignedIntegerValue",
    "UnsignedLongValue",
    "BinaryValue",
    "ShortValue",
    "IntegerValue",
    "LongValue",
    "HugeIntegerValue",
    "FloatValue",
    "DoubleValue",
    "DecimalValue",
    "StringValue",
    "UUIDValue",
    "BitValue",
    "BlobValue",
    "DateValue",
    "IntervalValue",
    "TimestampValue",
    "TimestampSecondValue",
    "TimestampMilisecondValue",
    "TimestampNanosecondValue",
    "TimestampTimeZoneValue",
    "TimeValue",
    "TimeTimeZoneValue",
])

__all__ = _exported_symbols
