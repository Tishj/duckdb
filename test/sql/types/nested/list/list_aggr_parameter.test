# name: test/sql/types/nested/list/list_aggr_parameter.test
# description: Test lists aggregations with extra parameters
# group: [list]

statement ok
PRAGMA enable_verification

query I
SELECT list_aggr(list(i), 'quantile', 0.5) FROM range(1, 11) tbl(i);
----
5

query I
SELECT list_aggr(list(i), 'quantile', [0.25, 0.5, 0.75]) FROM range(1, 11) tbl(i);
----
[3, 5, 8]

query I
SELECT list_aggr(list(i), 'string_agg', '|') FROM range(1, 4) tbl(i);
----
1|2|3

# non-constant argument (not supported right now)
statement error
SELECT list_aggr([0, 1, 2, 3], 'arg_min', i) FROM range(1, 4) tbl(i);
----
Invalid Input Error: Aggregate function arg_min(NULL, i) is not supported for list_aggr: extra arguments were not removed during bind

# not enough arguments
statement error
SELECT list_aggr(list(i), 'quantile') FROM range(10) tbl(i);
----
Binder Error: No matching aggregate function
No function matches the given name and argument types 'quantile(BIGINT)'. You might need to add explicit type casts.
	Candidate functions:
	quantile(DECIMAL, DOUBLE) -> DECIMAL
	quantile(DECIMAL, DOUBLE[]) -> DECIMAL[]
	quantile(TINYINT, DOUBLE) -> TINYINT
	quantile(TINYINT, DOUBLE[]) -> TINYINT[]
	quantile(SMALLINT, DOUBLE) -> SMALLINT
	quantile(SMALLINT, DOUBLE[]) -> SMALLINT[]
	quantile(INTEGER, DOUBLE) -> INTEGER
	quantile(INTEGER, DOUBLE[]) -> INTEGER[]
	quantile(BIGINT, DOUBLE) -> BIGINT
	quantile(BIGINT, DOUBLE[]) -> BIGINT[]
	quantile(HUGEINT, DOUBLE) -> HUGEINT
	quantile(HUGEINT, DOUBLE[]) -> HUGEINT[]
	quantile(FLOAT, DOUBLE) -> FLOAT
	quantile(FLOAT, DOUBLE[]) -> FLOAT[]
	quantile(DOUBLE, DOUBLE) -> DOUBLE
	quantile(DOUBLE, DOUBLE[]) -> DOUBLE[]
	quantile(DATE, DOUBLE) -> DATE
	quantile(DATE, DOUBLE[]) -> DATE[]
	quantile(TIMESTAMP, DOUBLE) -> TIMESTAMP
	quantile(TIMESTAMP, DOUBLE[]) -> TIMESTAMP[]
	quantile(TIME, DOUBLE) -> TIME
	quantile(TIME, DOUBLE[]) -> TIME[]
	quantile(TIMESTAMP WITH TIME ZONE, DOUBLE) -> TIMESTAMP WITH TIME ZONE
	quantile(TIMESTAMP WITH TIME ZONE, DOUBLE[]) -> TIMESTAMP WITH TIME ZONE[]
	quantile(TIME WITH TIME ZONE, DOUBLE) -> TIME WITH TIME ZONE
	quantile(TIME WITH TIME ZONE, DOUBLE[]) -> TIME WITH TIME ZONE[]
	quantile(INTERVAL, DOUBLE) -> INTERVAL
	quantile(INTERVAL, DOUBLE[]) -> INTERVAL[]
	quantile(VARCHAR, DOUBLE) -> VARCHAR
	quantile(VARCHAR, DOUBLE[]) -> VARCHAR[]

# too many arguments
statement error
SELECT list_aggr(list(i), 'min', 1) FROM range(10) tbl(i);
----
Binder Error: No matching aggregate function
No function matches the given name and argument types 'min(BIGINT, INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	min(DECIMAL) -> DECIMAL
	min(ANY) -> ANY

statement error
SELECT list_aggr(list(i), 'quantile', 0.5, 0.3, 0.5) FROM range(10) tbl(i);
----
Binder Error: No matching aggregate function
No function matches the given name and argument types 'quantile(BIGINT, DECIMAL(2,1), DECIMAL(2,1), DECIMAL(2,1))'. You might need to add explicit type casts.
	Candidate functions:
	quantile(DECIMAL, DOUBLE) -> DECIMAL
	quantile(DECIMAL, DOUBLE[]) -> DECIMAL[]
	quantile(TINYINT, DOUBLE) -> TINYINT
	quantile(TINYINT, DOUBLE[]) -> TINYINT[]
	quantile(SMALLINT, DOUBLE) -> SMALLINT
	quantile(SMALLINT, DOUBLE[]) -> SMALLINT[]
	quantile(INTEGER, DOUBLE) -> INTEGER
	quantile(INTEGER, DOUBLE[]) -> INTEGER[]
	quantile(BIGINT, DOUBLE) -> BIGINT
	quantile(BIGINT, DOUBLE[]) -> BIGINT[]
	quantile(HUGEINT, DOUBLE) -> HUGEINT
	quantile(HUGEINT, DOUBLE[]) -> HUGEINT[]
	quantile(FLOAT, DOUBLE) -> FLOAT
	quantile(FLOAT, DOUBLE[]) -> FLOAT[]
	quantile(DOUBLE, DOUBLE) -> DOUBLE
	quantile(DOUBLE, DOUBLE[]) -> DOUBLE[]
	quantile(DATE, DOUBLE) -> DATE
	quantile(DATE, DOUBLE[]) -> DATE[]
	quantile(TIMESTAMP, DOUBLE) -> TIMESTAMP
	quantile(TIMESTAMP, DOUBLE[]) -> TIMESTAMP[]
	quantile(TIME, DOUBLE) -> TIME
	quantile(TIME, DOUBLE[]) -> TIME[]
	quantile(TIMESTAMP WITH TIME ZONE, DOUBLE) -> TIMESTAMP WITH TIME ZONE
	quantile(TIMESTAMP WITH TIME ZONE, DOUBLE[]) -> TIMESTAMP WITH TIME ZONE[]
	quantile(TIME WITH TIME ZONE, DOUBLE) -> TIME WITH TIME ZONE
	quantile(TIME WITH TIME ZONE, DOUBLE[]) -> TIME WITH TIME ZONE[]
	quantile(INTERVAL, DOUBLE) -> INTERVAL
	quantile(INTERVAL, DOUBLE[]) -> INTERVAL[]
	quantile(VARCHAR, DOUBLE) -> VARCHAR
	quantile(VARCHAR, DOUBLE[]) -> VARCHAR[]

# non-constant argument
statement error
SELECT list_aggr(list(i), 'quantile', i) FROM range(10) tbl(i);
----
Binder Error: QUANTILE can only take constant parameters
