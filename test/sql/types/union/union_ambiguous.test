# name: test/sql/types/union/union_ambiguous.test
# description: Test union types with ambiguous members
# group: [union]

# disallow members with same name (case insensitive)
statement error
CREATE TABLE tbl(a UNION(b INT, b INT));
----
Parser Error: Duplicate union type tag name "b"

statement error
CREATE TABLE tbl(a UNION(b INT, B INT));
----
Parser Error: Duplicate union type tag name "B"


# allow members with same type
statement ok
CREATE TABLE tbl(a UNION(b INT, c INT));

# disallow inserting ambiguous values
statement error
INSERT INTO tbl VALUES (1), (2), (3);
----
Conversion Error: Type INTEGER can't be cast as UNION(b INTEGER, c INTEGER). The cast is ambiguous, multiple possible members in target: 'b (INTEGER)', 'c (INTEGER)'. Disambiguate the target type by using the 'union_value(<tag> := <arg>)' function to promote the source value to a single member union before casting.

# allow inserting explicitly tagged values using the union_value function 
# to create singleton unions and utilizing the union(A) -> union(A,B) cast

statement ok
INSERT INTO tbl VALUES (union_value(b := 1)), (union_value(c := 2)), (union_value(b := 3));

# when using explicit tags, all the tags must be present
statement error
INSERT INTO tbl VALUES (union_value(b := 3)), (union_value(a := 4)), (union_value(b := 5));
----
Conversion Error: Type UNION(a INTEGER) can't be cast as UNION(b INTEGER, c INTEGER). The member 'a' is not present in target union

query I
SELECT a.b FROM tbl
----
1
NULL
3

query I
SELECT a.c FROM tbl
----
NULL
2
NULL

query I
SELECT a FROM tbl
----
1
2
3

# ensure the above works with struct members as well
statement ok
CREATE TABLE tbl2(a UNION(b STRUCT(foo VARCHAR), c STRUCT(foo VARCHAR)));

statement error
INSERT INTO tbl2 VALUES ({'foo': 'bar'}), ({'foo': 'baz'});
----
PLACEHOLDER_ERROR_MESSAGE841

statement error
INSERT INTO tbl2 VALUES (union_value(b := {'foo': 'bar'})), (union_value(c := {'foo': 'baz'})), (union_value(d := {'foo': 'qux'}));
----
PLACEHOLDER_ERROR_MESSAGE840

statement ok
INSERT INTO tbl2 VALUES (union_value(b := {'foo': 'bar'})), (union_value(c := {'foo': 'baz'}));

query I
SELECT a.b.foo FROM tbl2
----
bar
NULL

query I
SELECT a.c.foo FROM tbl2
----
NULL
baz

query I
SELECT a FROM tbl2
----
{'foo': bar}
{'foo': baz}

# advanced case
statement ok
CREATE TABLE tbl3(a UNION(b INT, c STRUCT(b INT)));

statement ok
INSERT INTO tbl3 VALUES (1), (union_value(b := 2)), (union_value(c := {'b': 3}));

query I
SELECT a FROM tbl3
----
1
2
{'b': 3}
