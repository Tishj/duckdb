# name: test/sql/function/list/lambdas/lambdas_and_macros.test
# description: Test mixing lambdas and macros
# group: [lambdas]

statement ok
PRAGMA enable_verification

# conflicting column names
statement ok
create table test as select range i from range(3);

# Error: Binder Error: Conflicting column names for column i!
statement error
create macro my_macro(i) as (select i in (select i from test));
----
Binder Error: Conflicting column names for column i!

statement ok
CREATE MACRO list_contains_macro(x, y) AS (list_contains(x, y))

query I
SELECT list_filter([[1, 2, 1], [1, 2, 3], [1, 1, 1]], x -> list_contains_macro(x, 3))
----
[[1, 2, 3]]

statement ok
CREATE MACRO macro_with_lambda(list, num) AS (list_transform(list, x -> x + num))

query I
SELECT list_filter([[1, 2], NULL, [3], [4, NULL]], f -> list_count(macro_with_lambda(f, 2)) > 1)
----
[[1, 2]]

statement error
CREATE MACRO some_macro(x, y, z) AS (SELECT list_transform(x, x -> x + y + z))
----
Binder Error: Invalid parameter name '"0_macro_parameterssome_macro".x': must be unqualified

# this is a bit more tricky, because the operator mismatch is only detected when using the macro
statement ok
CREATE MACRO some_macro(x, y, z) AS (SELECT list_transform(x, a -> x + y + z))

statement error
SELECT some_macro([1, 2], 3, 4);
----
Binder Error: No function matches the given name and argument types '+(INTEGER[], INTEGER)'. You might need to add explicit type casts.
	Candidate functions:
	+(TINYINT) -> TINYINT
	+(TINYINT, TINYINT) -> TINYINT
	+(SMALLINT) -> SMALLINT
	+(SMALLINT, SMALLINT) -> SMALLINT
	+(INTEGER) -> INTEGER
	+(INTEGER, INTEGER) -> INTEGER
	+(BIGINT) -> BIGINT
	+(BIGINT, BIGINT) -> BIGINT
	+(HUGEINT) -> HUGEINT
	+(HUGEINT, HUGEINT) -> HUGEINT
	+(FLOAT) -> FLOAT
	+(FLOAT, FLOAT) -> FLOAT
	+(DOUBLE) -> DOUBLE
	+(DOUBLE, DOUBLE) -> DOUBLE
	+(DECIMAL) -> DECIMAL
	+(DECIMAL, DECIMAL) -> DECIMAL
	+(UTINYINT) -> UTINYINT
	+(UTINYINT, UTINYINT) -> UTINYINT
	+(USMALLINT) -> USMALLINT
	+(USMALLINT, USMALLINT) -> USMALLINT
	+(UINTEGER) -> UINTEGER
	+(UINTEGER, UINTEGER) -> UINTEGER
	+(UBIGINT) -> UBIGINT
	+(UBIGINT, UBIGINT) -> UBIGINT
	+(DATE, INTEGER) -> DATE
	+(INTEGER, DATE) -> DATE
	+(INTERVAL, INTERVAL) -> INTERVAL
	+(DATE, INTERVAL) -> DATE
	+(INTERVAL, DATE) -> DATE
	+(TIME, INTERVAL) -> TIME
	+(INTERVAL, TIME) -> TIME
	+(TIMESTAMP, INTERVAL) -> TIMESTAMP
	+(INTERVAL, TIMESTAMP) -> TIMESTAMP
	+(TIME, DATE) -> TIMESTAMP
	+(DATE, TIME) -> TIMESTAMP
	+(ANY[], ANY[]) -> ANY[]

